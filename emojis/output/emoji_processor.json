{
  "original_file": "/home/runner/work/X/X/emojis/emoji_processor.py",
  "content": "import os\nimport re\nimport json\nimport shutil\nfrom pathlib import Path\nfrom typing import Dict, List, Set, Union, Any\n\n# Emoji 表情集合，包含动物与自然、食物与饮料、活动、物体、旅行与地点等类别\nEMOJI_POOL = [\n    # 动物与自然\n    '🥇', '🍦', '🚎', '🚍', '🐮', '🍌', '🥩', '🌗', '🍠', '⚽', \n    '🏈', '🎪', '🥔', '🔧', '🎸', '🏓', '🥘', '🥐', '🎭', '🏐', \n    '🏉', '🌱', '📽️', '🐵', '🎼', '🚆', '📽️', '🎻', '📼', '🚪', \n    '🥕', '⛷️', '🎬', '💾', '⚽', '🐻', '🚵', '🐤', '✈️', '❄️', \n    '☀️', '⭐', '✨', '🐧', '☁️', '🥓️', '⛅', '❄️', '🌏', '🏊',\n    \n    # 食物与饮料\n    '🍢', '🐶', '🥈', '🍝', '🏅', '🔨', '⚾', '🍉', '🏀', '🌯', \n    '🛁', '🐣', '⚾', '🏈', '🧀', '🍟', '🔌️', '🍇', '🌹', '🔍', \n    '🍚', '🍎', '🥭', '🌺', '🥗', '🎬', '🥝', '🎱', '🌸', '🍋', \n    '🚿', '⛳', '📟', '🎧', '🎳', '🐦', '🎭', '🚐', '🍥', '🐰', \n    '🍴', '🛋️', '🌵', '🔥', '🎯', '🌙', '🏸', '🌠', '🏇', '🌻',\n    \n    # 活动\n    '⚽', '🚇', '🥉', '⚾', '📸', '🃏', '🍔', '📽️', '🍐', '🕹️', \n    '⛳', '🔎️', '💿', '⚒️', '📞', '⛷️', '🔩', '🥁', '🍍️', '🚁', \n    '🃏', '💽', '📀', '🍆', '🚴', '🚅', '🍣', '🎨', '🎤️', '🔋', \n    '🏌️', '⛅', '🌖', '🖨️', '🚀', '✨', '🚌', '🔬', '🌘', '🚉', \n    '📱', '🎿', '⚽', '🚇', '🥉', '⚾', '📸', '🃏', '🍔', '📽️',\n    \n    # 物体\n    '🏉', '🍖', '🐱', '🔪', '📠', '⌨️', '🎾️', '🎱️', '🍍️', '🥁', \n    '💡', '🍓', '🦁', '💻', '⭐', '🎮', '🍿', '🎧', '🎤️', '🎥', \n    '🚽', '🍜', '🎮', '🌴', '🪑', '⛵️', '🕹️', '🎼', '🥄', '💦', \n    '🥮', '⚒️', '🍊️', '🛠️', '🍘', '🌼', '📷', '🐯', '🐼', '🍱', \n    '🌍', '🐸', '🚴', '🚅', '🍣', '🎨', '🎤️', '🔋', '🏌️', '⛅',\n    \n    # 旅行与地点\n    '✈️', '🌚', '🍈', '⛵', '🍅', '🚢', '🐔', '🎷', '☁️', '🧰', \n    '🌲', '🍲', '🏀', '🏆', '🥖', '🌕', '🔦', '🌽', '🍞', '⌨️', \n    '🌶️', '☀️', '🎲', '🐨', '🏐', '🔭', '🌛️', '🌎️', '🎹️', '🎪', \n    '🍡', '🚊', '🍗', '🍳', '🍒', '🌳', '🐭', '🍙', '🪑', '🦊', \n    '🌧️️', '🍤', '🚂', '🖥️', '🐷', '🎨', '🎤️', '🍑', '🐹', '🎾'\n]\n\n# Emoji 正则表达式模式\nEMOJI_REGEX = re.compile(r'[\\U0001F300-\\U0001F64F\\U0001F680-\\U0001F6FF\\U0001F900-\\U0001F9FF\\U0001F1E0-\\U0001F1FF]')\n\nclass EmojiProcessor:\n    def __init__(self):\n        \"\"\"初始化Emoji处理器\"\"\"\n        self.emoji_pool = EMOJI_POOL\n        self.emoji_index = 0\n    \n    def get_next_emoji(self) -> str:\n        \"\"\"获取下一个Emoji，当池用尽时循环使用\"\"\"\n        emoji = self.emoji_pool[self.emoji_index]\n        self.emoji_index = (self.emoji_index + 1) % len(self.emoji_pool)\n        return emoji\n    \n    def replace_emojis(self, content: str) -> str:\n        \"\"\"替换文本中的Emoji为新的Emoji\"\"\"\n        # 提取所有Emoji并去重\n        unique_emojis = set(EMOJI_REGEX.findall(content))\n        \n        # 创建Emoji映射\n        emoji_mapping = {old_emoji: self.get_next_emoji() for old_emoji in unique_emojis}\n        \n        # 替换Emoji\n        return EMOJI_REGEX.sub(lambda match: emoji_mapping.get(match.group(0), match.group(0)), content)\n    \n    def process_json(self, content: Union[Dict, List]) -> Union[Dict, List]:\n        \"\"\"处理JSON内容，递归替换其中的Emoji\"\"\"\n        if isinstance(content, dict):\n            return {k: self.process_json(v) for k, v in content.items()}\n        elif isinstance(content, list):\n            return [self.process_json(item) for item in content]\n        elif isinstance(content, str):\n            return self.replace_emojis(content)\n        else:\n            return content\n    \n    def process_file(self, input_path: Path, output_path: Path) -> None:\n        \"\"\"处理单个文件\"\"\"\n        try:\n            # 读取文件内容\n            if input_path.suffix.lower() == '.json':\n                with open(input_path, 'r', encoding='utf-8') as f:\n                    content = json.load(f)\n                # 处理JSON内容\n                processed_content = self.process_json(content)\n                # 写入JSON文件\n                with open(output_path, 'w', encoding='utf-8') as f:\n                    json.dump(processed_content, f, ensure_ascii=False, indent=2)\n            else:\n                # 处理普通文本文件\n                with open(input_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n                processed_content = self.replace_emojis(content)\n                # 写入JSON文件\n                output_data = {\n                    \"original_file\": str(input_path),\n                    \"content\": processed_content\n                }\n                with open(output_path, 'w', encoding='utf-8') as f:\n                    json.dump(output_data, f, ensure_ascii=False, indent=2)\n            print(f\"已处理: {input_path} -> {output_path}\")\n        except Exception as e:\n            print(f\"处理文件 {input_path} 时出错: {e}\")\n    \n    def process_directory(self, input_dir: Path, output_dir: Path) -> None:\n        \"\"\"处理目录中的所有文件\"\"\"\n        # 创建输出目录\n        output_dir.mkdir(parents=True, exist_ok=True)\n        \n        # 处理所有文件\n        for item in input_dir.iterdir():\n            # 跳过输出目录，避免无限递归\n            if item.is_dir() and item == output_dir:\n                continue\n                \n            if item.is_file():\n                # 构建输出文件路径，保持文件名相同但扩展名为.json\n                output_file = output_dir / (item.stem + '.json')\n                self.process_file(item, output_file)\n            elif item.is_dir():\n                # 递归处理子目录\n                sub_output_dir = output_dir / item.name\n                self.process_directory(item, sub_output_dir)\n\ndef main():\n    \"\"\"主函数\"\"\"\n    # 获取当前工作目录\n    current_dir = Path.cwd()\n    \n    # 默认输入和输出目录\n    input_dir = current_dir / 'emojis'\n    output_dir = input_dir / 'output'  # 修改输出目录为 emojis/output\n    \n    # 检查输入目录是否存在\n    if not input_dir.exists():\n        print(f\"错误: 输入目录 '{input_dir}' 不存在\")\n        return\n    \n    # 处理目录\n    processor = EmojiProcessor()\n    processor.process_directory(input_dir, output_dir)\n    \n    print(\"处理完成!\")\n    print(f\"处理后的文件已保存在: {output_dir}\")\n\nif __name__ == \"__main__\":\n    main()\n"
}