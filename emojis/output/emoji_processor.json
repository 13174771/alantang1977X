{
  "original_file": "/home/runner/work/X/X/emojis/emoji_processor.py",
  "content": "import os\nimport re\nimport json\nfrom pathlib import Path\nfrom typing import Dict, List, Union, Any\n\n# Emoji 表情集合，包含动物与自然、食物与饮料、活动、物体、旅行与地点等类别\nEMOJI_POOL = [\n    # 动物与自然\n    '🌏', '🚉', '🌸', '🥝', '🏆', '🐻', '🎤', '🚌', '🎬', '🛠️', \n    '⭐', '🚅', '🚐', '⚾', '🎧', '🍉', '🥘', '🍚', '🎸', '🎻', \n    '🚍', '🍝', '📠', '🐧', '🏊', '🍅', '🌶️', '🐰', '🍢', '🚎', \n    '⛷️', '🍿', '🍥', '🔥', '🌙', '🌽', '🐼', '💿', '🎼', '🍐', \n    '☀️', '⭐', '✨', '🍖', '☁️', '🔨️', '⛅', '❄️', '❄️', '🎹',\n    \n    # 食物与饮料\n    '🐤', '🎿', '🎲', '⌨️', '⛳', '🐣', '🥗', '🍆', '🔦', '🚀', \n    '🧀', '🌠', '📽️', '🐭', '🌹', '🎱', '🐦️', '🔬', '🌱', '🚽', \n    '🍟', '💡', '🐔', '🍇', '🌺', '🚇', '🎭', '🍗', '📽️', '🕹️', \n    '🌯', '🍒', '🌛', '🧰', '🎨', '🏀', '🌗', '🌲', '🦁', '🥇', \n    '⛅', '🚆', '🌍', '🌕', '🍜', '💻', '🕹️', '☀️', '🏉', '🍎',\n    \n    # 活动\n    '⚽', '🎭', '🥩', '⚾', '🥔', '🎾', '🍦', '🚂', '🍓', '📀', \n    '⛳', '📞️', '🐨', '🎮', '🥐', '⛷️', '📼', '🍌', '🌻️', '🎨', \n    '🃏', '🍱', '🥕', '🛁', '📽️', '🐹', '⚒️', '🍴', '🎧️', '🌳', \n    '🍲', '🥄', '🎾', '🌴', '🍠', '🍊', '🖥️', '🐱', '🌚', '🏐', \n    '🌘', '🏀', '⚽', '🎭', '🥩', '⚾', '🥔', '🎾', '🍦', '🚂',\n    \n    # 物体\n    '🐮', '🏓', '🎯', '🍳', '🐸', '⌨️', '🔌️', '🏅️', '🌻️', '🍌', \n    '🖨️', '☁️', '🍞', '🏸', '🏉', '📸', '🎼', '🏇', '🎧️', '🎱', \n    '🏈', '⚽', '🍑', '🌵', '🪑', '🍍️', '🌧️', '⚽', '🐷', '🥭', \n    '🎮', '⚒️', '💦️', '🎪', '🌖', '🔩', '🔭', '🪑', '🔧', '🛋️', \n    '🏐', '🔪', '📽️', '🐹', '⚒️', '🍴', '🎧️', '🌳', '🍲', '🥄',\n    \n    # 旅行与地点\n    '✈️', '🥈', '🍈', '⛵', '🎥', '📷', '🥖', '🏌️', '🍣', '🥉', \n    '✨', '🎬', '🔋', '🃏', '🎳', '🍔', '🦊', '🥁', '🐶', '💽', \n    '🔎', '⚾', '🐵', '🥓', '🎤', '🌼', '🚊️', '🌎️', '🍡️', '🚁', \n    '🔍', '🚴', '🍋', '🥮', '🍙', '📱', '🏈', '🍤', '🚢', '🚪', \n    '🍘️', '🎪', '⛵', '✈️', '💾', '🚿', '🎷️', '📟', '🚵', '🐯'\n]\n\n# Emoji 正则表达式模式，匹配常见Emoji字符\nEMOJI_REGEX = re.compile(\n    r'[\\U0001F300-\\U0001F64F\\U0001F680-\\U0001F6FF\\U0001F900-\\U0001F9FF\\U0001F1E0-\\U0001F1FF]'\n)\n\nclass EmojiManager:\n    \"\"\"Emoji表情管理类，负责Emoji的替换和循环使用\"\"\"\n    \n    def __init__(self):\n        \"\"\"初始化Emoji管理器\"\"\"\n        self.emoji_pool = EMOJI_POOL\n        self.emoji_index = 0\n    \n    def get_next_emoji(self) -> str:\n        \"\"\"获取下一个Emoji，池用尽时循环使用\"\"\"\n        emoji = self.emoji_pool[self.emoji_index]\n        self.emoji_index = (self.emoji_index + 1) % len(self.emoji_pool)\n        return emoji\n    \n    def replace_emojis(self, text: str) -> str:\n        \"\"\"替换文本中的Emoji为新的Emoji\"\"\"\n        if not text:\n            return text\n            \n        # 提取所有Emoji并去重\n        unique_emojis = set(EMOJI_REGEX.findall(text))\n        if not unique_emojis:\n            return text\n            \n        # 创建Emoji映射关系\n        emoji_mapping = {old_emoji: self.get_next_emoji() for old_emoji in unique_emojis}\n        \n        # 执行Emoji替换\n        return EMOJI_REGEX.sub(\n            lambda match: emoji_mapping.get(match.group(0), match.group(0)),\n            text\n        )\n\n\nclass FileProcessor:\n    \"\"\"文件处理类，负责不同格式文件的Emoji处理\"\"\"\n    \n    def __init__(self, emoji_manager: EmojiManager):\n        \"\"\"初始化文件处理器\"\"\"\n        self.emoji_manager = emoji_manager\n    \n    def process_json(self, content: Union[Dict, List]) -> Union[Dict, List]:\n        \"\"\"递归处理JSON内容中的Emoji\"\"\"\n        if isinstance(content, dict):\n            return {k: self.process_json(v) for k, v in content.items()}\n        elif isinstance(content, list):\n            return [self.process_json(item) for item in content]\n        elif isinstance(content, str):\n            return self.emoji_manager.replace_emojis(content)\n        return content\n    \n    def process_text_file(self, content: str, input_path: Path) -> Dict[str, Any]:\n        \"\"\"处理文本文件（非JSON）的Emoji替换\"\"\"\n        processed_content = self.emoji_manager.replace_emojis(content)\n        return {\n            \"original_file\": str(input_path),\n            \"content\": processed_content\n        }\n    \n    def process_file(self, input_path: Path, output_path: Path) -> None:\n        \"\"\"处理单个文件，区分JSON和非JSON格式\"\"\"\n        try:\n            # 读取文件内容\n            with open(input_path, 'r', encoding='utf-8') as f:\n                if input_path.suffix.lower() == '.json':\n                    # 处理JSON文件\n                    content = json.load(f)\n                    processed_content = self.process_json(content)\n                    # 写入处理后的JSON文件\n                    with open(output_path, 'w', encoding='utf-8') as out_f:\n                        json.dump(processed_content, out_f, ensure_ascii=False, indent=2)\n                else:\n                    # 处理非JSON文本文件\n                    content = f.read()\n                    processed_data = self.process_text_file(content, input_path)\n                    # 写入包含原始文件信息的JSON文件\n                    with open(output_path, 'w', encoding='utf-8') as out_f:\n                        json.dump(processed_data, out_f, ensure_ascii=False, indent=2)\n            print(f\"已处理: {input_path} -> {output_path}\")\n        except Exception as e:\n            print(f\"处理文件 {input_path} 时出错: {str(e)}\")\n\n\nclass DirectoryProcessor:\n    \"\"\"目录处理类，负责递归处理目录下的所有文件\"\"\"\n    \n    def __init__(self, file_processor: FileProcessor):\n        \"\"\"初始化目录处理器\"\"\"\n        self.file_processor = file_processor\n    \n    def process_directory(self, input_dir: Path, output_dir: Path) -> None:\n        \"\"\"递归处理目录中的所有文件\"\"\"\n        # 创建输出目录（如果不存在）\n        output_dir.mkdir(parents=True, exist_ok=True)\n        \n        # 处理目录中的每个项目\n        for item in input_dir.iterdir():\n            if item.is_file():\n                # 处理文件\n                output_file = output_dir / (item.stem + '.json')\n                self.file_processor.process_file(item, output_file)\n            elif item.is_dir() and item != output_dir:\n                # 递归处理子目录\n                sub_output_dir = output_dir / item.name\n                self.process_directory(item, sub_output_dir)\n\n\ndef main():\n    \"\"\"主函数，协调整个Emoji处理流程\"\"\"\n    try:\n        # 定义输入输出目录\n        current_dir = Path.cwd()\n        input_dir = current_dir / 'emojis'\n        output_dir = input_dir / 'output'\n        \n        # 检查输入目录是否存在\n        if not input_dir.exists():\n            print(f\"错误: 输入目录 '{input_dir}' 不存在\")\n            return\n        \n        # 初始化Emoji管理器和文件处理器\n        emoji_manager = EmojiManager()\n        file_processor = FileProcessor(emoji_manager)\n        directory_processor = DirectoryProcessor(file_processor)\n        \n        # 开始处理目录\n        print(f\"开始处理目录: {input_dir}\")\n        directory_processor.process_directory(input_dir, output_dir)\n        \n        print(f\"处理完成! 结果保存在: {output_dir}\")\n        \n    except Exception as e:\n        print(f\"程序执行出错: {str(e)}\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
}